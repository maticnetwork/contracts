{
  "contractName": "ERC721PlasmaMintable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"exists(uint256)\":{\"details\":\"Returns whether the specified token exists\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the existence of\"},\"return\":\"bool whether the token exists\"},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"tokenId\":\"The token id to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/arpit/projects/contracts/contracts/common/tokens/ERC721PlasmaMintable.sol\":\"ERC721PlasmaMintable\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/arpit/projects/contracts/contracts/common/tokens/ERC721PlasmaMintable.sol\":{\"keccak256\":\"0xfa7e816f5b85ce9ac8c3ca087c3a129677c722523b7a668fa6ab0dba29223a9d\",\"urls\":[\"bzzr://8f4084d07e1f89d3eaeb44edd45f76c8ddd42bed6a2fbcfd3726398b2f5fae45\"]},\"openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0x75481aaa988c5e9fbc91b4f695678806579c04e0ad56907978c1ca5c7e92a682\",\"urls\":[\"bzzr://da472135eb9268d863825ea26e227a9f8980c54bd32e0764d61711acca59fc89\"]},\"openzeppelin-solidity/contracts/access/roles/MinterRole.sol\":{\"keccak256\":\"0x317b01d5df6753f57244b354d0a23d5055b293f3fa22693c2ff7906cc988ce97\",\"urls\":[\"bzzr://d3f08352c241a34db9b244c5fb569c7ffb3dcd1a0aa288c855a4a70eddb9e2a3\"]},\"openzeppelin-solidity/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x982e18d2e3df98e3339f70f955a4d1fb78411a29963d0ea34621759eef67e86d\",\"urls\":[\"bzzr://a5438906da44343a09c6b47666d3649f269d9d156f2109e147e21595b2284363\"]},\"openzeppelin-solidity/contracts/introspection/ERC165.sol\":{\"keccak256\":\"0xd86c61f2e7e78c88716b5591bbf2d6cce8fe1a68320484994810d54f82605a7a\",\"urls\":[\"bzzr://4823f8b1263e0bacc50b5a823ebb27abeda34bffd67fa72225c44ebb2b4a30c7\"]},\"openzeppelin-solidity/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xc48ee580d20820cc0ef122b2acc9bf8836731dd8b9671cc03d21a12e3ab14976\",\"urls\":[\"bzzr://744cf3b8280d4a050ad0771e2ed0d7d41bbddfa40a541933d46bb31007a2e4a9\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80\",\"urls\":[\"bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x07029cbf047f6559e30862f33be2ee323c763e2fc251bca5de44177d29cf15e2\",\"urls\":[\"bzzr://bacac55aed34ace5358b0c89d0fdcd424e3b2d67e2deb51e238b54bd4903317f\"]},\"openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\":{\"keccak256\":\"0x188b149d129830814fac640678295376012741a9303e9c59a816d873f9f5f151\",\"urls\":[\"bzzr://dea98da5963fcb2636140cb3bf2e5d6045c491c81e32600b256188a0cbd086ee\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x44fd7c58fc1323f8481f160f2fd4c34b1653d0cc5def45c2381898d32bcc023e\",\"urls\":[\"bzzr://b7c59c72ede9ca492a5606cbbfaa4ba84e9869d9bdcdac2183655baae8b64026\"]},\"openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xeb8a266ef2da0aa60eea704031902ffd28b2d13dd0e8f5b69bcfb8415f2dad85\",\"urls\":[\"bzzr://393e9843d41c0652f115378cc58083c4acc4d83f7999fe22932d5e237c215d3f\"]},\"openzeppelin-solidity/contracts/utils/Address.sol\":{\"keccak256\":\"0xea16b9933153c647242ba50b3e494fb133063d49f1fa81823f35a8c28754142e\",\"urls\":[\"bzzr://aa2b2eb534149525e194341c01cadf666668a1b7d679a268d10e23570a7e26b1\"]}},\"version\":1}",
  "bytecode": "0x608060405261001a6301ffc9a760e01b61004460201b60201c565b6100306380ac58cd60e01b61004460201b60201c565b61003f336100b060201b60201c565b610186565b7fffffffff00000000000000000000000000000000000000000000000000000000808216141561007357600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b6100c88160056100ff60201b610b541790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6001600160a01b03811661011257600080fd5b610122828261015160201b60201c565b1561012c57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b03821661016657600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b610c2f806101956000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146102d4578063aa271e1a14610302578063b88d4fde14610328578063e985e9c5146103ee576100f5565b80636352211e1461025157806370a082311461026e578063983b2d56146102a657806398650275146102cc576100f5565b806323b872dd116100d357806323b872dd1461019c57806340c10f19146101d257806342842e0e146101fe5780634f558e7914610234576100f5565b806301ffc9a7146100fa578063081812fc14610135578063095ea7b31461016e575b600080fd5b6101216004803603602081101561011057600080fd5b50356001600160e01b03191661041c565b604080519115158252519081900360200190f35b6101526004803603602081101561014b57600080fd5b503561043b565b604080516001600160a01b039092168252519081900360200190f35b61019a6004803603604081101561018457600080fd5b506001600160a01b03813516906020013561046b565b005b61019a600480360360608110156101b257600080fd5b506001600160a01b03813581169160208101359091169060400135610518565b610121600480360360408110156101e857600080fd5b506001600160a01b03813516906020013561053b565b61019a6004803603606081101561021457600080fd5b506001600160a01b03813581169160208101359091169060400135610562565b6101216004803603602081101561024a57600080fd5b503561057d565b6101526004803603602081101561026757600080fd5b503561058e565b6102946004803603602081101561028457600080fd5b50356001600160a01b03166105b0565b60408051918252519081900360200190f35b61019a600480360360208110156102bc57600080fd5b50356001600160a01b03166105e6565b61019a610604565b61019a600480360360408110156102ea57600080fd5b506001600160a01b038135169060200135151561060f565b6101216004803603602081101561031857600080fd5b50356001600160a01b0316610693565b61019a6004803603608081101561033e57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561037957600080fd5b82018360208201111561038b57600080fd5b803590602001918460018302840111640100000000831117156103ad57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106a6945050505050565b6101216004803603604081101561040457600080fd5b506001600160a01b03813581169160200135166106cc565b6001600160e01b03191660009081526020819052604090205460ff1690565b6000610446826106fa565b61044f57600080fd5b506000908152600260205260409020546001600160a01b031690565b60006104768261058e565b9050806001600160a01b0316836001600160a01b0316141561049757600080fd5b336001600160a01b03821614806104b357506104b381336106cc565b6104bc57600080fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6105223382610717565b61052b57600080fd5b610536838383610776565b505050565b600061054633610693565b61054f57600080fd5b6105598383610856565b50600192915050565b610536838383604051806020016040528060008152506106a6565b6000610588826106fa565b92915050565b6000818152600160205260408120546001600160a01b03168061058857600080fd5b60006001600160a01b0382166105c557600080fd5b6001600160a01b0382166000908152600360205260409020610588906108f7565b6105ef33610693565b6105f857600080fd5b610601816108fb565b50565b61060d33610943565b565b6001600160a01b03821633141561062557600080fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600061058860058363ffffffff61098b16565b6106b1848484610518565b6106bd848484846109c0565b6106c657600080fd5b50505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b6000806107238361058e565b9050806001600160a01b0316846001600160a01b0316148061075e5750836001600160a01b03166107538461043b565b6001600160a01b0316145b8061076e575061076e81856106cc565b949350505050565b826001600160a01b03166107898261058e565b6001600160a01b03161461079c57600080fd5b6001600160a01b0382166107af57600080fd5b6107b881610af9565b6001600160a01b03831660009081526003602052604090206107d990610b34565b6001600160a01b03821660009081526003602052604090206107fa90610b4b565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b03821661086957600080fd5b610872816106fa565b1561087c57600080fd5b600081815260016020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558352600390915290206108bb90610b4b565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b61090c60058263ffffffff610b5416565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61095460058263ffffffff610ba016565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b0382166109a057600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b60006109d4846001600160a01b0316610be8565b6109e05750600161076e565b604051600160e11b630a85bd0102815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610a5d578181015183820152602001610a45565b50505050905090810190601f168015610a8a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b505050506040513d6020811015610ad657600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6000818152600260205260409020546001600160a01b03161561060157600090815260026020526040902080546001600160a01b0319169055565b8054610b4790600163ffffffff610bee16565b9055565b80546001019055565b6001600160a01b038116610b6757600080fd5b610b71828261098b565b15610b7b57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038116610bb357600080fd5b610bbd828261098b565b610bc657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b3b151590565b600082821115610bfd57600080fd5b5090039056fea165627a7a72305820d029862ffbe831a022e8e29a231ca6a69ad7bd97ff320e69b93baa18c232dfcd0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146102d4578063aa271e1a14610302578063b88d4fde14610328578063e985e9c5146103ee576100f5565b80636352211e1461025157806370a082311461026e578063983b2d56146102a657806398650275146102cc576100f5565b806323b872dd116100d357806323b872dd1461019c57806340c10f19146101d257806342842e0e146101fe5780634f558e7914610234576100f5565b806301ffc9a7146100fa578063081812fc14610135578063095ea7b31461016e575b600080fd5b6101216004803603602081101561011057600080fd5b50356001600160e01b03191661041c565b604080519115158252519081900360200190f35b6101526004803603602081101561014b57600080fd5b503561043b565b604080516001600160a01b039092168252519081900360200190f35b61019a6004803603604081101561018457600080fd5b506001600160a01b03813516906020013561046b565b005b61019a600480360360608110156101b257600080fd5b506001600160a01b03813581169160208101359091169060400135610518565b610121600480360360408110156101e857600080fd5b506001600160a01b03813516906020013561053b565b61019a6004803603606081101561021457600080fd5b506001600160a01b03813581169160208101359091169060400135610562565b6101216004803603602081101561024a57600080fd5b503561057d565b6101526004803603602081101561026757600080fd5b503561058e565b6102946004803603602081101561028457600080fd5b50356001600160a01b03166105b0565b60408051918252519081900360200190f35b61019a600480360360208110156102bc57600080fd5b50356001600160a01b03166105e6565b61019a610604565b61019a600480360360408110156102ea57600080fd5b506001600160a01b038135169060200135151561060f565b6101216004803603602081101561031857600080fd5b50356001600160a01b0316610693565b61019a6004803603608081101561033e57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561037957600080fd5b82018360208201111561038b57600080fd5b803590602001918460018302840111640100000000831117156103ad57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106a6945050505050565b6101216004803603604081101561040457600080fd5b506001600160a01b03813581169160200135166106cc565b6001600160e01b03191660009081526020819052604090205460ff1690565b6000610446826106fa565b61044f57600080fd5b506000908152600260205260409020546001600160a01b031690565b60006104768261058e565b9050806001600160a01b0316836001600160a01b0316141561049757600080fd5b336001600160a01b03821614806104b357506104b381336106cc565b6104bc57600080fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6105223382610717565b61052b57600080fd5b610536838383610776565b505050565b600061054633610693565b61054f57600080fd5b6105598383610856565b50600192915050565b610536838383604051806020016040528060008152506106a6565b6000610588826106fa565b92915050565b6000818152600160205260408120546001600160a01b03168061058857600080fd5b60006001600160a01b0382166105c557600080fd5b6001600160a01b0382166000908152600360205260409020610588906108f7565b6105ef33610693565b6105f857600080fd5b610601816108fb565b50565b61060d33610943565b565b6001600160a01b03821633141561062557600080fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600061058860058363ffffffff61098b16565b6106b1848484610518565b6106bd848484846109c0565b6106c657600080fd5b50505050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6000908152600160205260409020546001600160a01b0316151590565b6000806107238361058e565b9050806001600160a01b0316846001600160a01b0316148061075e5750836001600160a01b03166107538461043b565b6001600160a01b0316145b8061076e575061076e81856106cc565b949350505050565b826001600160a01b03166107898261058e565b6001600160a01b03161461079c57600080fd5b6001600160a01b0382166107af57600080fd5b6107b881610af9565b6001600160a01b03831660009081526003602052604090206107d990610b34565b6001600160a01b03821660009081526003602052604090206107fa90610b4b565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b03821661086957600080fd5b610872816106fa565b1561087c57600080fd5b600081815260016020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558352600390915290206108bb90610b4b565b60405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b5490565b61090c60058263ffffffff610b5416565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b61095460058263ffffffff610ba016565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b0382166109a057600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b60006109d4846001600160a01b0316610be8565b6109e05750600161076e565b604051600160e11b630a85bd0102815233600482018181526001600160a01b03888116602485015260448401879052608060648501908152865160848601528651600095928a169463150b7a029490938c938b938b939260a4019060208501908083838e5b83811015610a5d578181015183820152602001610a45565b50505050905090810190601f168015610a8a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b505050506040513d6020811015610ad657600080fd5b50516001600160e01b031916600160e11b630a85bd010214915050949350505050565b6000818152600260205260409020546001600160a01b03161561060157600090815260026020526040902080546001600160a01b0319169055565b8054610b4790600163ffffffff610bee16565b9055565b80546001019055565b6001600160a01b038116610b6757600080fd5b610b71828261098b565b15610b7b57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b038116610bb357600080fd5b610bbd828261098b565b610bc657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b3b151590565b600082821115610bfd57600080fd5b5090039056fea165627a7a72305820d029862ffbe831a022e8e29a231ca6a69ad7bd97ff320e69b93baa18c232dfcd0029",
  "sourceMap": "100:326:30:-;;;639:40:65;236:10;658:20;;639:18;;;:40;;:::i;:::-;1970::74;1227:10;1989:20;;1970:18;;;:40;;:::i;:::-;275:22:63;286:10;275;;;:22;;:::i;:::-;100:326:30;;989:158:65;1064:25;;;;;;1056:34;;;;;;1100:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1100:40:65;1136:4;1100:40;;;989:158::o;685:119:63:-;741:21;754:7;741:8;:12;;;;;;:21;;;;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:63;;;;;;;;685:119;:::o;259:181:62:-;-1:-1:-1;;;;;335:21:62;;327:30;;;;;;376:18;380:4;386:7;376:3;;;:18;;:::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:62;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:62;429:4;406:27;;;259:181::o;786:162::-;858:4;-1:-1:-1;;;;;882:21:62;;874:30;;;;;;-1:-1:-1;;;;;;921:20:62;:11;:20;;;;;;;;;;;;;;;786:162::o;100:326:30:-;;;;;;;",
  "deployedSourceMap": "100:326:30:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;100:326:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;777:133:65;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;777:133:65;-1:-1:-1;;;;;;777:133:65;;:::i;:::-;;;;;;;;;;;;;;;;;;3773:151:74;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3773:151:74;;:::i;:::-;;;;-1:-1:-1;;;;;3773:151:74;;;;;;;;;;;;;;3196:292;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3196:292:74;;;;;;;;:::i;:::-;;5329:180;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5329:180:74;;;;;;;;;;;;;;;;;:::i;442:132:78:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;442:132:78;;;;;;;;:::i;6142::74:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;6142:132:74;;;;;;;;;;;;;;;;;:::i;330:94:30:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;330:94:30;;:::i;2598:177:74:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2598:177:74;;:::i;2220:160::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2220:160:74;-1:-1:-1;;;;;2220:160:74;;:::i;:::-;;;;;;;;;;;;;;;;508:90:63;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;508:90:63;-1:-1:-1;;;;;508:90:63;;:::i;604:75::-;;;:::i;4216:213:74:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4216:213:74;;;;;;;;;;:::i;395:107:63:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;395:107:63;-1:-1:-1;;;;;395:107:63;;:::i;6979:211:74:-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;6979:211:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;6979:211:74;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6979:211:74;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6979:211:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;6979:211:74;;-1:-1:-1;6979:211:74;;-1:-1:-1;;;;;6979:211:74:i;4750:145::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4750:145:74;;;;;;;;;;:::i;777:133:65:-;-1:-1:-1;;;;;;870:33:65;847:4;870:33;;;;;;;;;;;;;;777:133::o;3773:151:74:-;3832:7;3859:16;3867:7;3859;:16::i;:::-;3851:25;;;;;;-1:-1:-1;3893:24:74;;;;:15;:24;;;;;;-1:-1:-1;;;;;3893:24:74;;3773:151::o;3196:292::-;3259:13;3275:16;3283:7;3275;:16::i;:::-;3259:32;;3315:5;-1:-1:-1;;;;;3309:11:74;:2;-1:-1:-1;;;;;3309:11:74;;;3301:20;;;;;;3339:10;-1:-1:-1;;;;;3339:19:74;;;;:58;;;3362:35;3379:5;3386:10;3362:16;:35::i;:::-;3331:67;;;;;;3409:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;3409:29:74;-1:-1:-1;;;;;3409:29:74;;;;;;;;;3453:28;;3409:24;;3453:28;;;;;;;3196:292;;;:::o;5329:180::-;5419:39;5438:10;5450:7;5419:18;:39::i;:::-;5411:48;;;;;;5470:32;5484:4;5490:2;5494:7;5470:13;:32::i;:::-;5329:180;;;:::o;442:132:78:-;512:4;350:20:63;359:10;350:8;:20::i;:::-;342:29;;;;;;528:18:78;534:2;538:7;528:5;:18::i;:::-;-1:-1:-1;563:4:78;442:132;;;;:::o;6142::74:-;6228:39;6245:4;6251:2;6255:7;6228:39;;;;;;;;;;;;:16;:39::i;330:94:30:-;384:4;403:16;411:7;403;:16::i;:::-;396:23;330:94;-1:-1:-1;;330:94:30:o;2598:177:74:-;2653:7;2688:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2688:20:74;2726:19;2718:28;;;;;2220:160;2275:7;-1:-1:-1;;;;;2302:19:74;;2294:28;;;;;;-1:-1:-1;;;;;2339:24:74;;;;;;:17;:24;;;;;:34;;:32;:34::i;508:90:63:-;350:20;359:10;350:8;:20::i;:::-;342:29;;;;;;572:19;583:7;572:10;:19::i;:::-;508:90;:::o;604:75::-;647:25;661:10;647:13;:25::i;:::-;604:75::o;4216:213:74:-;-1:-1:-1;;;;;4295:16:74;;4301:10;4295:16;;4287:25;;;;;;4341:10;4322:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4322:34:74;;;;;;;;;;;;:45;;-1:-1:-1;;4322:45:74;;;;;;;;;;4382:40;;;;;;;4322:34;;4341:10;4382:40;;;;;;;;;;;4216:213;;:::o;395:107:63:-;451:4;474:21;:8;487:7;474:21;:12;:21;:::i;6979:211:74:-;7085:31;7098:4;7104:2;7108:7;7085:12;:31::i;:::-;7134:48;7157:4;7163:2;7167:7;7176:5;7134:22;:48::i;:::-;7126:57;;;;;;6979:211;;;;:::o;4750:145::-;-1:-1:-1;;;;;4853:25:74;;;4830:4;4853:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4750:145::o;7384:152::-;7441:4;7473:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7473:20:74;7510:19;;;7384:152::o;7896:246::-;7981:4;7997:13;8013:16;8021:7;8013;:16::i;:::-;7997:32;;8058:5;-1:-1:-1;;;;;8047:16:74;:7;-1:-1:-1;;;;;8047:16:74;;:51;;;;8091:7;-1:-1:-1;;;;;8067:31:74;:20;8079:7;8067:11;:20::i;:::-;-1:-1:-1;;;;;8067:31:74;;8047:51;:87;;;;8102:32;8119:5;8126:7;8102:16;:32::i;:::-;8039:96;7896:246;-1:-1:-1;;;;7896:246:74:o;9844:362::-;9957:4;-1:-1:-1;;;;;9937:24:74;:16;9945:7;9937;:16::i;:::-;-1:-1:-1;;;;;9937:24:74;;9929:33;;;;;;-1:-1:-1;;;;;9980:16:74;;9972:25;;;;;;10008:23;10023:7;10008:14;:23::i;:::-;-1:-1:-1;;;;;10042:23:74;;;;;;:17;:23;;;;;:35;;:33;:35::i;:::-;-1:-1:-1;;;;;10087:21:74;;;;;;:17;:21;;;;;:33;;:31;:33::i;:::-;10131:20;;;;:11;:20;;;;;;:25;;-1:-1:-1;;;;;;10131:25:74;-1:-1:-1;;;;;10131:25:74;;;;;;;;;10172:27;;10131:20;;10172:27;;;;;;;9844:362;;;:::o;8385:259::-;-1:-1:-1;;;;;8456:16:74;;8448:25;;;;;;8492:16;8500:7;8492;:16::i;:::-;8491:17;8483:26;;;;;;8520:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;;;;;8520:25:74;-1:-1:-1;;;;;8520:25:74;;;;;;;;8555:21;;:17;:21;;;;;:33;;:31;:33::i;:::-;8604;;8629:7;;-1:-1:-1;;;;;8604:33:74;;;8621:1;;8604:33;;8621:1;;8604:33;8385:259;;:::o;1062:112:64:-;1153:14;;1062:112::o;685:119:63:-;741:21;:8;754:7;741:21;:12;:21;:::i;:::-;777:20;;-1:-1:-1;;;;;777:20:63;;;;;;;;685:119;:::o;810:127::-;869:24;:8;885:7;869:24;:15;:24;:::i;:::-;908:22;;-1:-1:-1;;;;;908:22:63;;;;;;;;810:127;:::o;786:162:62:-;858:4;-1:-1:-1;;;;;882:21:62;;874:30;;;;;;-1:-1:-1;;;;;;921:20:62;:11;:20;;;;;;;;;;;;;;;786:162::o;10734:347:74:-;10855:4;10880:15;:2;-1:-1:-1;;;;;10880:13:74;;:15::i;:::-;10875:58;;-1:-1:-1;10918:4:74;10911:11;;10875:58;10959:70;;-1:-1:-1;;;;;10959:70:74;;10996:10;10959:70;;;;;;-1:-1:-1;;;;;10959:70:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;10943:13;;10959:36;;;;;;10996:10;;11008:4;;11014:7;;11023:5;;10959:70;;;;;;;;;;;10943:13;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10959:70:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10959:70:74;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10959:70:74;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10959:70:74;-1:-1:-1;;;;;;11047:26:74;-1:-1:-1;;;;;11047:26:74;;-1:-1:-1;;10734:347:74;;;;;;:::o;11242:171::-;11341:1;11305:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11305:24:74;:38;11301:106;;11394:1;11359:24;;;:15;:24;;;;;:37;;-1:-1:-1;;;;;;11359:37:74;;;11242:171::o;1275:108:64:-;1355:14;;:21;;1374:1;1355:21;:18;:21;:::i;:::-;1338:38;;1275:108::o;1180:89::-;1243:19;;1261:1;1243:19;;;1180:89::o;259:181:62:-;-1:-1:-1;;;;;335:21:62;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:62;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:62;429:4;406:27;;;259:181::o;514:184::-;-1:-1:-1;;;;;593:21:62;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;-1:-1:-1;;;;;663:20:62;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:62;;;514:184::o;463:616:83:-;1026:20;1064:8;;;463:616::o;1211:145:68:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;-1:-1:-1;1325:5:68;;;1211:145::o",
  "source": "pragma solidity ^0.5.2;\n\nimport \"openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\";\n\ncontract ERC721PlasmaMintable is ERC721Mintable {\n  /**\n   * @dev Returns whether the specified token exists\n   * @param tokenId uint256 ID of the token to query the existence of\n   * @return bool whether the token exists\n   */\n  function exists(uint256 tokenId) public view returns (bool) {\n    return _exists(tokenId);\n  }\n}\n",
  "sourcePath": "/Users/arpit/projects/contracts/contracts/common/tokens/ERC721PlasmaMintable.sol",
  "ast": {
    "absolutePath": "/Users/arpit/projects/contracts/contracts/common/tokens/ERC721PlasmaMintable.sol",
    "exportedSymbols": {
      "ERC721PlasmaMintable": [
        5016
      ]
    },
    "id": 5017,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5000,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:30"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol",
        "id": 5001,
        "nodeType": "ImportDirective",
        "scope": 5017,
        "sourceUnit": 18851,
        "src": "25:73:30",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5002,
              "name": "ERC721Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 18850,
              "src": "133:14:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Mintable_$18850",
                "typeString": "contract ERC721Mintable"
              }
            },
            "id": 5003,
            "nodeType": "InheritanceSpecifier",
            "src": "133:14:30"
          }
        ],
        "contractDependencies": [
          16837,
          16937,
          16947,
          18336,
          18850,
          18953
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5016,
        "linearizedBaseContracts": [
          5016,
          18850,
          16837,
          18336,
          18953,
          16937,
          16947
        ],
        "name": "ERC721PlasmaMintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 5014,
              "nodeType": "Block",
              "src": "390:34:30",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5011,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5005,
                        "src": "411:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5010,
                      "name": "_exists",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18088,
                      "src": "403:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 5012,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:16:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 5009,
                  "id": 5013,
                  "nodeType": "Return",
                  "src": "396:23:30"
                }
              ]
            },
            "documentation": "@dev Returns whether the specified token exists\n@param tokenId uint256 ID of the token to query the existence of\n@return bool whether the token exists",
            "id": 5015,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5006,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5005,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 5015,
                  "src": "346:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5004,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "346:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "345:17:30"
            },
            "returnParameters": {
              "id": 5009,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5008,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 5015,
                  "src": "384:4:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5007,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "384:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "383:6:30"
            },
            "scope": 5016,
            "src": "330:94:30",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 5017,
        "src": "100:326:30"
      }
    ],
    "src": "0:427:30"
  },
  "legacyAST": {
    "absolutePath": "/Users/arpit/projects/contracts/contracts/common/tokens/ERC721PlasmaMintable.sol",
    "exportedSymbols": {
      "ERC721PlasmaMintable": [
        5016
      ]
    },
    "id": 5017,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5000,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:30"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol",
        "id": 5001,
        "nodeType": "ImportDirective",
        "scope": 5017,
        "sourceUnit": 18851,
        "src": "25:73:30",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 5002,
              "name": "ERC721Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 18850,
              "src": "133:14:30",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Mintable_$18850",
                "typeString": "contract ERC721Mintable"
              }
            },
            "id": 5003,
            "nodeType": "InheritanceSpecifier",
            "src": "133:14:30"
          }
        ],
        "contractDependencies": [
          16837,
          16937,
          16947,
          18336,
          18850,
          18953
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 5016,
        "linearizedBaseContracts": [
          5016,
          18850,
          16837,
          18336,
          18953,
          16937,
          16947
        ],
        "name": "ERC721PlasmaMintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 5014,
              "nodeType": "Block",
              "src": "390:34:30",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 5011,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5005,
                        "src": "411:7:30",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 5010,
                      "name": "_exists",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18088,
                      "src": "403:7:30",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 5012,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "403:16:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 5009,
                  "id": 5013,
                  "nodeType": "Return",
                  "src": "396:23:30"
                }
              ]
            },
            "documentation": "@dev Returns whether the specified token exists\n@param tokenId uint256 ID of the token to query the existence of\n@return bool whether the token exists",
            "id": 5015,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5006,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5005,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 5015,
                  "src": "346:15:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 5004,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "346:7:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "345:17:30"
            },
            "returnParameters": {
              "id": 5009,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5008,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 5015,
                  "src": "384:4:30",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 5007,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "384:4:30",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "383:6:30"
            },
            "scope": 5016,
            "src": "330:94:30",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 5017,
        "src": "100:326:30"
      }
    ],
    "src": "0:427:30"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-21T10:53:39.015Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token exists",
        "params": {
          "tokenId": "uint256 ID of the token to query the existence of"
        },
        "return": "bool whether the token exists"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}